1.
import java.util.*;
		public class CheckSingleton {
			static CheckSingleton obj = new CheckSingleton();
			private CheckSingleton() 
			{
				
			}
			public static CheckSingleton getobj()
			{
				return obj;
				
			}
			
		}
		class Subclass extends CheckSingleton
		{
			public static void main(String[] args)
			{
			Subclass act= new Subclass();
			act.getobj();
			}
			
		}

2.
class EMP //creatin base class
{
   void total_sal(int man, int lab) //creating a method
    {
        int t= man+ lab;
        System.out.println("this is emp total salary="+t);
        
    }

    
}
class Man extends EMP //inherting the base classe(overriding )
{
   void total_sal()
   {
       
       System.out.println("this manager salary");
   }
}
class Labo extends EMP
{
    void total_sal()
    {
        System.out.println("this labour salary");
    }

}
public class EML
{
    public static void main(String args[])
    {
        Man ts= new Man ();//creating a object for child class
        ts.total_sal(200084,23764);//calling a method
        

    }
}


3.
 class Bank
{
    String name;
    double totalcash;
    public Bank(String AccountholderName,double totalcash)
   {
   super();
   this.name =AccountholderName;
   this.totalcash= totalcash;
   }
   public String getAccountholderName(){
   return name;
   }
   public void setAccountholderName(String AccountholderName){
   this.name=AccountholderName;
   }
   public double gettotalcash(){
   return totalcash;
   }
   public void settotalcash(double totalcash){
   this.totalcash=totalcash;
   }
}

 class Savingsaccount extends Bank{
    long fixeddeposit=800000;
    double rateofinterest =0.9;
    public Savingsaccount(String AccountholderName,double totalcash)
    {
    super(AccountholderName,totalcash);
    }
    public double gettotalcash(){
    return totalcash+(fixeddeposit*rateofinterest);
    }
}

 class Currentaccount extends Bank{
    long cashcredit=500000;
    public Currentaccount(String AccountholderName,double totalcash)
    {
      super (AccountholderName,totalcash);
    }
    public double gettotalcash(){
    return totalcash+cashcredit;
    }
    }

public class BankCash 
{
    public static void main(String[] args)
     { double Tcash;
       Savingsaccount sa=new Savingsaccount("abbas",500000);
       sa.gettotalcash();
       Currentaccount ca=new Currentaccount("khasim",600000);
        ca.gettotalcash();
       Tcash=sa.gettotalcash()+ca.gettotalcash();
       System.out.println("name of accountholder:"+sa.getAccountholderName()+" and totalcash:"+sa.gettotalcash());
       System.out.println("name of accountholder:"+ca.getAccountholderName()+" and totalcash:"+ca.gettotalcash());
       System.out.println("total cash in bank:"+Tcash);
    }
 }

4.
public class App 
{
    private static App app;
     
    private App()
    {

    }
    public static App getInstance()
    {
        if(null == app)
        {
            app = new App();
        }
        return app;
    }

    
    public static void main(String args[])
    {
       App app= App.getInstance();
       App app1= App.getInstance();

    }
}

5.
abstract class Shape   //4.Abstract class can not be private here by 
                     //default public and also can not be final
{
     abstract void draw();
    
}


abstract class Shows //You can declare a class abstract without having any abstract method
{
    void talk()
    {
        System.out.println("this is talk show");
    }

}


//*3. When we extend an abstract class, we must either override all the
//abstract methods in sub class 
//or declare subclass as abstract

 class line extends Shape
   {
       void draw()
       {
           System.out.println("Drawing a line ");
       }
   }


//

public class Abstr4 {
    public static void main(String args[])
    {
    // 2.object for the abstract class can not be created object created
    // for only sub classes
      
    line l = new line();
    l.draw();  
}
}

6.
import java.util.Scanner;
interface Persistence
{
   public void persist ();

}
class FilePersistence implements Persistence
{
     public void persist()
    {
        System.out.println("persistance sub class 1 ");
    }
}
class  DatabasePersistence implements Persistence 
{
    public void persist()
    {
        
        System.out.println("persistenace sub class 2");
    }
}
public class Persis
 {
    public static void main(String args[])
    {
        String data;
        Scanner sc =new Scanner(System.in);
        System.out.println("Enter the data ");
        data =sc.next();
        if(data=="FilePersistance")
        {
            FilePersistence obj=new FilePersistence();
         obj.persist();
        }
        else{
            DatabasePersistence obj1=new DatabasePersistence();
            obj1.persist();
        }
    }
}

7.


import javax.sound.sampled.Line;

abstract class Shape
{
   abstract void draw();

}
class line extends Shape
{
    void draw()
    {
        System.out.println("Drawing a line ");
    }
}
class Rect extends Shape  
{
    void draw()
    {
        System.out.println("Drawing a Rectangle");
    }
}
class Cube extends Shape
{
    void draw()
    {
        System.out.println("Drawing a Cube");
    }
}
class Shapes{
 public static void main(String args[])
    {
        line l =new line();
        l.draw();
        Rect r =new Rect();
        r.draw();
        Cube c=new Cube();
        c.draw();

        
    }
}
