1.
import java.util.HashSet;
import java.util.Set;

public class Employee {

	private String empName;
	private String department;
	private int salary;
	private int empId;

	public Employee(int empId, String empName, int salary, String department) {
		super();
		this.empId = empId;
		this.empName = empName;
		this.salary = salary;
		this.department = department;
		
	}
	public final void setEmpName(String empName) {
	     this.empName = empName;
	}
	public final int getsalary() {
		return salary;
	}
  public final void setsalary(int salary) {
	   this.salary = salary;
  }
      public final String getdepartment() {
   	   return department;
      }
      
      public final void setdepartment(String department) {
   	   this.department = department;
      }
      
      public String toString() {
   	   return "Employee [empId=" + empId +", empName=" + empName + ", salary="+ salary +", department= "+ department +"]";
      }
      
      public int hashCode() {
   	   return this.empId;
      }
      
      public boolean equals(Object obj) {
   	   Employee employee = (Employee) obj;
   	   
   	   if (employee.empId == this.empId) {
   	       employee.setEmpName(this.empName);
   	       employee.setsalary(this.salary);
   	       employee.setdepartment(this.department);
   	       
       }
          
              return true;
     }
       {
      
        }
           
      public static void main(String[] args) {
    	  
   	   Set<Employee> employees = new HashSet<>();
   	   
   	   employees.add(new Employee(1,"Bhavya",500000,"cse"));
   	   
   	   employees.add(new Employee(2, "Sweety",500000,"cse"));
   	   
   	   
   	   System.out.println("employees:" +employees);
   	   
      }
   }


2.
import java.util.*;
public class Generics2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Random rand= new Random();
		HashSet<Number> hs=new LinkedHashSet<Number>();
		for(int i=0;i<10;i++) {
			int keys=rand.nextInt(100);
			double values=rand.nextDouble();
			hs.add(keys);
			hs.add(values);
		}
		List<Number> list = new ArrayList<Number>(hs);
		for(int j=0;j<list.size();j+=2) {
			System.out.println("Key : "+list.get(j)+" Value : "+list.get(j+1));
			
		}
		}
	}

3.
class Generics<T>{
	private T[] arr;
	public T[] getArr() {
		return arr;
	}
	public void setArr(T[] arr) {
		this.arr=arr;
	}
	public Generics(T[] arr) {
		super();
		this.arr=arr;
	}
	public<E>void Exchange(E[] arr) {
		System.out.println("Elements to be exchanged are "+ arr[0]+" "+arr[1]);
		E temp=(E) arr[0];
		arr[0]=arr[1];
		arr[1]=temp;
		System.out.println("After exchanging:"+arr[0]+" "+arr[1]);
	}
}
public class Generics3 {

	public static void main(String[] args) {
		Integer arr[]= {20,30};
		Generics<Integer> e = new Generics<Integer>(arr);
		e.Exchange(arr);
	}
}

4.
import java.util.Date;
import java.util.HashMap;

class pair<key,value>{
	private String key;
	private String value;
	private Date date;
	pair(){}
	public pair(String key, String value) {
		super();
		this.setKey(key);
		this.value = value;
	}
	
	public pair(String key, Date date) {
		super();
		this.key = key;
		this.date = date;
	}
	public String getKey() {
		return key;
	}
	public void setKey(String key) {
		this.key = key;
	}
	public String getValue() {
		return value;
	}
	public void setValue(String value) {
		this.value = value;
	}
	public Date getDate() {
		return date;
	}
	public void setDate(Date date) {
		this.date = date;
	}
	
}
public class Generics4 {

	public static void main(String args[]) {
		pair<String,String> p=new pair<String,String>("1","Hello");
		HashMap<String,String> h=new HashMap<String,String>();
		pair<String,Date> p1=new pair<String,Date>("Today is ",new java.util.Date());
		h.put(p.getKey(),p.getValue());
		System.out.println(h);
		HashMap<String,String h1=new HashMap<String,String>();
		h1.put(p1.getKey(),p1.getValue());
		System.out.println(h1);
	}
}
